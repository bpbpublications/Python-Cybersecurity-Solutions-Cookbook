# fingerprint_malware_detection.py

"""
Description:
    Using fingerprint of files to detect if any files are suspected malware.

Author:
    Nishant Krishna

Chapter:
    Chapter 07 - Malware and Phishing Analysis
    
Created:
    01 October, 2022
"""

import os
import hashlib
import csv

# Set the location of output file to the current directory
__location__ = os.path.realpath(os.path.join(
    os.getcwd(), os.path.dirname(__file__)))


class FingerprintMalwareDetection:
    def get_fingerprint(self, filename):

        file_name = os.path.join(__location__, filename)
        with open(file_name, 'r') as file:
            plain_text = file.read()

        # For general encoding, a salt may not be needed
        hashed_text = hashlib.sha256(plain_text.encode()).hexdigest()
        return hashed_text

    def generate_fingerprints(self) -> None:
        """Generate fingerprints (checksums) of a suspicous file in the current directory
        so that we can use this for testing of malware later.
        """

        file_name = 'sample_malicious_file.txt'
        fingerprint = self.get_fingerprint(file_name)

        checksums = open('checksums.csv', 'w')
        checksums_writer = csv.writer(checksums, delimiter=',')
        checksums_writer.writerow([file_name, fingerprint])

    def detect_malicious_files(self) -> None:
        """Compares the fingerprints (checksum) of all the .txt files in the current diretory with what was generated before (the probable malware files) and shows if we have any match
        """
        file_list = os.listdir()
        checksums = open('checksums.csv', 'r')
        checksums_reader = csv.reader(checksums, delimiter=',')

        # Create a dictionary out of the CSV file of all the checksums so that we can easily compare the values
        mydict = {rows[0]: rows[1] for rows in checksums_reader}

        for file_name in file_list:
            if file_name.endswith('.txt'):
                with open(file_name, 'r'):
                    fingerprint = self.get_fingerprint(file_name)

                    if file_name in mydict:
                        if (mydict[file_name] == fingerprint):
                            print(file_name, ': Suspicious file. May be malware...')
                        else:
                            print(file_name, ': OK')
                    else:
                        print(file_name, ': OK')


if __name__ == "__main__":
    fingerprint_detection = FingerprintMalwareDetection()
    fingerprint_detection.generate_fingerprints()
    # fingerprint_detection.detect_malicious_files()
